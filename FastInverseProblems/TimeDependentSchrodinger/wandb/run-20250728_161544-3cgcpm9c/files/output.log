torch.Size([5000, 100])
tensor(1.2762e-07, grad_fn=<MeanBackward0>)
torch.Size([4900, 100])
tensor(1.4335e-07, grad_fn=<MeanBackward0>)
torch.Size([5000, 100])
tensor(1.2822e-07, grad_fn=<MeanBackward0>)
torch.Size([4900, 100])
tensor(1.4326e-07, grad_fn=<MeanBackward0>)
torch.Size([5000, 100])
tensor(1.2775e-07, grad_fn=<MeanBackward0>)
torch.Size([4900, 100])
tensor(1.4386e-07, grad_fn=<MeanBackward0>)
torch.Size([5000, 100])
tensor(1.2709e-07, grad_fn=<MeanBackward0>)
torch.Size([4900, 100])
tensor(1.4362e-07, grad_fn=<MeanBackward0>)
Traceback (most recent call last):
  File "/u/smanor/PINN-RC/FastInverseProblems/TimeDependentSchrodinger/OfflineTraining.py", line 436, in <module>
    Reservoir, averageLossOverTime = trainFullNetworkWithPrecomputing(TorchReservoir,HyperTensReservoir,data,(tscale),(xscale),outmodel,nummodels,ICs,LeftBoundary,RightBoundary,colocationPoints,ODEWeight,ICWeight,BCWeight,DataWeight,trainingEpochs,loss_fn,trainlr,averageLossOverTime,device,verbose=False)
  File "/u/smanor/PINN-RC/FastInverseProblems/TimeDependentSchrodinger/OfflineTraining.py", line 257, in trainFullNetworkWithPrecomputing
    grad2 = torch.autograd.grad(
  File "/u/smanor/.conda/envs/PINN-RC/lib/python3.10/site-packages/torch/autograd/__init__.py", line 496, in grad
    result = _engine_run_backward(
  File "/u/smanor/.conda/envs/PINN-RC/lib/python3.10/site-packages/torch/autograd/graph.py", line 825, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt
